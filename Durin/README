NAME
    Durin - A Perl data mining framework

SYNOPSIS
      use Durin;
  
      This POD contains the structure and a short introduction to the Durin DM framework

DESCRIPTION
    The objective of the framework is to provide an extensible approach to
    ease the implementation of data mining processes. The framework has been
    up to now implemented in Perl. The framework is based in components that
    are implemented as Perl objects. We review here what the different
    directories contain.

  Infrastructure:

    Components
        Contains the different kind of components that are contained into
        the framework. It also contains some common roles as: MIManager (the
        manager of multiple inheritance) and NamedObject (a orthogonal class
        that implements a named object).

    FlexibleIO
        Contains the infrastructure for flexible input/output. This
        infrastructure is based in decomposing the I/O problem into three
        dimensions: A device, a format and an object. For each different
        device and format we have a IOHandler. An object should inherit from
        Externalizable to be part of the framework. The IORegistry contains
        the different Handlers and can be accessed at run-time. The user of
        the framework should use FlexibleIO::System to have access to these
        functionality.

    Utilities
        Contains common utilities for handling strings and math routines.

    Algorithms
        Contains common algorithms (actually only contains Kruskal and Gabow
        algorithms for finding minimum spanning trees).

    DataStructures
        Contains implementations of commonly used data structures as ordered
        lists, graphs, digraphs, ...

  Functionality

    Data
        Contains the Data component hierarchy

    Model
        Contains the different models that the system can induce. The
        processes used to induce them are in Process.

    Metadata
        Contains the Metadata component hierarchy

    scripts
        Contains different useful scripts that show the utility of the
        framework

    Process
        Contains the different processing methods provided by the framework.
        This includes the learning algorithms. Most of the functionality of
        the framework relies here.

    PP  Contain the preprocessing processes. We can find a simple framework
        for dealing with transformation in there. Discretization should go
        in there in the future.

    scripts
        Contains useful short scripts that can be used as utilities as well
        as as examples of usage of the framework.

USAGE
        TBD

BUGS
        TBD

SUPPORT
        TBD

AUTHOR
                Jesús Cerquides Bueno
                cerquide@iiia.csic.es
                http://a.galaxy.far.far.away/modules

COPYRIGHT
        Copyright (c) 2001 Jesús Cerquides Bueno. All rights reserved. This
        program is free software licensed under the...

                The GNU Lesser General Public License (LGPL)
                Version 2.1, February 1999

        The full text of the license can be found in the LICENSE file
        included with this module.

SEE ALSO
        perl(1).

PUBLIC METHODS
        Each public function/method is described here. These are how you
        should interact with this module.

PRIVATE METHODS
        Each private function/method is described here. These methods and
        functions are considered private and are intended for internal use
        by this module. They are not considered part of the public interface
        and are described here for documentation purposes only.

  sample_function

         Usage     : How to use this function/method
         Purpose   : What it does
         Returns   : What it returns
         Argument  : What it wants to know
         Throws    : Exceptions and other anomolies
         Comments  : This is a sample subroutine header.
                   : It is polite to include more pod and fewer comments.

        See Also :

